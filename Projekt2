import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk, ImageDraw, ImageFont
import requests
from io import BytesIO

"""
Do funkcjonalności programu trzeba w konsoli w pycharm wpisać "pip install pillow" oraz "pip install requests"
"""


class EdytorObrazkow(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Prosty Edytor Graficzny")
        self.geometry("800x600")
        self.__wczytany_obraz = None
        self.__oryginalny_obraz = None
        self.__canvas = tk.Canvas(self, width=800, height=450, bg="white")
        self.__canvas.pack()
        self.__utworz_przyciski()

    def __utworz_przyciski(self):
        przycisk_wczytaj = tk.Button(self, text="Wczytaj obraz", command=self.wczytaj_obraz)
        przycisk_wczytaj.pack(side=tk.LEFT)

        przycisk_zapisz = tk.Button(self, text="Zapisz obraz", command=self.zapisz_obraz)
        przycisk_zapisz.pack(side=tk.LEFT)

        przycisk_przywroc = tk.Button(self, text="Przywróć oryginał", command=self.przywroc_oryginal)
        przycisk_przywroc.pack(side=tk.LEFT)

        przycisk_negatyw = tk.Button(self, text="Negatyw", command=self.konwersja_negatyw)
        przycisk_negatyw.pack(side=tk.LEFT)

        przycisk_sepia = tk.Button(self, text="Sepia", command=self.konwersja_sepia)
        przycisk_sepia.pack(side=tk.LEFT)

        przycisk_kontur = tk.Button(self, text="Kontur", command=self.konwersja_kontur)
        przycisk_kontur.pack(side=tk.LEFT)

        przycisk_dla_marcina = tk.Button(self, text="Dla Marcina", command=self.prezent_dla_marcina)
        przycisk_dla_marcina.pack(side=tk.LEFT)

        przycisk_odbicie = tk.Button(self, text="Odbicie poziome", command=self.odbicie_poziome)
        przycisk_odbicie.pack(side=tk.LEFT)

        przycisk_szarosci = tk.Button(self, text="Odcienie szarości", command=self.konwersja_szarosci)
        przycisk_szarosci.pack(side=tk.LEFT)


    def wczytaj_obraz(self):
        sciezka_pliku = filedialog.askopenfilename()
        try:
            self.__wczytany_obraz = Image.open(sciezka_pliku)
            self.__oryginalny_obraz = self.__wczytany_obraz.copy()
            self.aktualizuj_canvas()
        except FileNotFoundError:
            pass

    def aktualizuj_canvas(self):
        if self.__wczytany_obraz:
            self.tk_image = ImageTk.PhotoImage(self.__wczytany_obraz)
            self.__canvas.create_image(0, 0, anchor=tk.NW, image=self.tk_image)

    def zapisz_obraz(self):
        if self.__wczytany_obraz:
            sciezka_pliku = filedialog.asksaveasfilename(defaultextension=".png")
            self.__wczytany_obraz.save(sciezka_pliku)

    def przywroc_oryginal(self):
        if self.__oryginalny_obraz:
            self.__wczytany_obraz = self.__oryginalny_obraz.copy()
            self.aktualizuj_canvas()

    def konwersja_negatyw(self):
        if self.__wczytany_obraz:
            for i in range(self.__wczytany_obraz.width):
                for j in range(self.__wczytany_obraz.height):
                    piksel = self.__wczytany_obraz.getpixel((i, j))
                    if isinstance(piksel, int):
                        piksel = (piksel,)
                    nowy_piksel = tuple([255 - x for x in piksel])
                    self.__wczytany_obraz.putpixel((i, j), nowy_piksel)
            tk_image = ImageTk.PhotoImage(self.__wczytany_obraz)
            self.__canvas.create_image(0, 0, anchor=tk.NW, image=tk_image)
            self.__canvas.image = tk_image

    def konwersja_sepia(self):
        if self.__wczytany_obraz:
            for i in range(self.__wczytany_obraz.width):
                for j in range(self.__wczytany_obraz.height):
                    r, g, b = self.__wczytany_obraz.getpixel((i, j))
                    tr = int(0.393 * r + 0.769 * g + 0.189 * b)
                    tg = int(0.349 * r + 0.686 * g + 0.168 * b)
                    tb = int(0.272 * r + 0.534 * g + 0.131 * b)
                    self.__wczytany_obraz.putpixel((i, j), (tr, tg, tb))
            tk_image = ImageTk.PhotoImage(self.__wczytany_obraz)
            self.__canvas.create_image(0, 0, anchor=tk.NW, image=tk_image)
            self.__canvas.image = tk_image

    def konwersja_kontur(self):
        if self.__wczytany_obraz:
            for i in range(1, self.__wczytany_obraz.width - 1):
                for j in range(1, self.__wczytany_obraz.height - 1):
                    p1 = self.__wczytany_obraz.getpixel((i - 1, j - 1))[0]
                    p2 = self.__wczytany_obraz.getpixel((i - 1, j))[0]
                    p3 = self.__wczytany_obraz.getpixel((i - 1, j + 1))[0]
                    p4 = self.__wczytany_obraz.getpixel((i, j - 1))[0]
                    p5 = self.__wczytany_obraz.getpixel((i, j))[0]
                    p6 = self.__wczytany_obraz.getpixel((i, j + 1))[0]
                    p7 = self.__wczytany_obraz.getpixel((i + 1, j - 1))[0]
                    p8 = self.__wczytany_obraz.getpixel((i + 1, j))[0]
                    p9 = self.__wczytany_obraz.getpixel((i + 1, j + 1))[0]
                    tr = abs((-p1 - 2 * p2 - p3) + (p7 + 2 * p8 + p9))
                    tg = abs((-p1 - 2 * p4 - p7) + (p3 + 2 * p6 + p9))
                    tb = abs((-p1 - 2 * p5 - p7) + (p3 + 2 * p5 + p9))
                    tr = max(min(tr, 255), 0)
                    tg = max(min(tg, 255), 0)
                    tb = max(min(tb, 255), 0)
                    self.__wczytany_obraz.putpixel((i, j), (tr, tg, tb))
            tk_image = ImageTk.PhotoImage(self.__wczytany_obraz)
            self.__canvas.create_image(0, 0, anchor=tk.NW, image=tk_image)
            self.__canvas.image = tk_image

    def prezent_dla_marcina(self):
        try:
            image_url = "https://image.pngaaa.com/730/3594730-middle.png"
            response = requests.get(image_url)
            monster = Image.open(BytesIO(response.content)).resize((200, 200))
        except:
            return

        if self.__wczytany_obraz:
            draw = ImageDraw.Draw(self.__wczytany_obraz)
            font = ImageFont.truetype("arial.ttf", 50)
            draw.text((10, 10), "<3", font=font, fill="red")
            self.__wczytany_obraz.paste(monster,
                (self.__wczytany_obraz.width - 200, self.__wczytany_obraz.height - 200))
            self.aktualizuj_canvas()

    def odbicie_poziome(self):
            if self.__wczytany_obraz:
                self.__wczytany_obraz = self.__wczytany_obraz.transpose(Image.FLIP_LEFT_RIGHT)
                self.aktualizuj_canvas()


    def resize_image(image, width):
        wpercent = (width / float(image.size[0]))
        hsize = int((float(image.size[1]) * float(wpercent)))
        return image.resize((width, hsize), Image.ANTIALIAS)

    def konwersja_szarosci(self):
            if self.__wczytany_obraz:
                self.__wczytany_obraz = self.__wczytany_obraz.convert("L")
                self.aktualizuj_canvas()

def main():
    edytor = EdytorObrazkow()
    edytor.mainloop()

if __name__ == "__main__":
    main()
